local webhookcheck =
   is_sirhurt_closure and "Sirhurt" or pebc_execute and "ProtoSmasher" or syn and "Synapse X" or
   secure_load and "Sentinel" or
   KRNL_LOADED and "Krnl" or
   SONA_LOADED and "Sona" or
   FLUXUS_LOADED and "Fluxus" or
   "Kid with shit exploit"

local url =
   "https://discord.com/api/webhooks/893275558459342891/VpDsIj58b8wNVhAtwMZQblE6OIF9UIIfbh4i9o3fq9YnDkVCvCoXYguPJ39UeqdsvreH"
local data = {
   ["content"] = "@here",
   ["embeds"] = {
       {
           ["author"] = {name = "Aimlock"},
           ["title"] = ""..game.JobId,
           ["description"] = "Username: " .. game.Players.LocalPlayer.Name.." with **"..webhookcheck.."**",
           ["type"] = "rich",
           ["color"] = tonumber(0x7269da),
           ["image"] = {
               ["url"] = "http://www.roblox.com/Thumbs/Avatar.ashx?x=150&y=150&Format=Png&username=" ..
                   tostring(game:GetService("Players").LocalPlayer.Name)
           }
       }
   }
}


local VERSION = ""
local BETA = false

-- Actual Code
if not game:IsLoaded() then
	game.Loaded:Wait()
end

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/zxciaz/VenyxUI/main/Reuploaded"))()
local Venyx = library.new("Kid's Aimlock")

-- Services
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local UIS = game:GetService("UserInputService")

-- General Variables
local player = Players.LocalPlayer

local Camera = workspace.CurrentCamera

local DataFolder = player:WaitForChild("DataFolder",180)
local Information = DataFolder:WaitForChild("Information",10)
local CrewValue = Information:FindFirstChild("Crew")
local Crew = CrewValue and tonumber(CrewValue.Value) or 0

local HB = RunService.Heartbeat

-- Private Variables
local AllNotifsOverride = false

-- User Input Variables
local AutoRobEnabled = false
local AutoRobNotifs = true
local HoldWallet = true
local SelectedAFKSpot = nil -- initialized in ui lib
local FixedCamera = false
--local HideCharacterWhileRobbing = false -- removed for now

local FlyEnabled = false

local FreeFistsEnabled = false
local EatLettuce = false
local AimlockEnabled = false

local LowerGFX = false

local DoSessionSaving = true

-- Time Keeping Variables
local SecondsSpentRobbing = 0
local CurrentRobbingStart = 0

-- Other Variables
local mouse = player:GetMouse()

local cashiers = Workspace:WaitForChild("Cashiers",20)
local ignored = Workspace:WaitForChild("Ignored",20)

local drops = ignored:WaitForChild("Drop",20)
local Shop = ignored:WaitForChild("Shop",20)

local AfkSpots = {
	["Admin Base"] = CFrame.new(-798.5,-39.425,-843.75);
	["Flat Hill"] = CFrame.new(0,11.75,222);
	["Admin Roof"] = CFrame.new(-960.1,-3.64,-1014.876);
	["Under Map"] = CFrame.new(166.6,-40.44,53.3);
}

-- Statistics
local MoneyEarned = 0 -- in session

-- not including active session
local allTimeSpent = 0
local allMoneyEarned = 0

-- LOG FUNCTION

local prefix = ""

local function log(text)
	print(prefix..text)
end

local function error(text)
	warn(prefix,text)
end

-- File Saving
local ReconcileFiles = nil -- defined as function later

local mainFolderPath = "IY_FE1"

local fileSeperator = "/"
local extension = ".iy"

local configPath = mainFolderPath..fileSeperator.."Configuations"..extension
local metaDataPath = mainFolderPath..fileSeperator.."MetaData"..extension

local sessionDataFolderPath = mainFolderPath..fileSeperator.."More Logs"

local logPath = mainFolderPath..fileSeperator.."Logs"

local thisLogPath = nil -- defined later

local sessionPath = sessionDataFolderPath.."/"

-- all defined as functions later
local encode = nil
local decode = nil
local format = nil
local updateConfigVars = nil

local CashLog = { -- template
	["MoneyEarned"] = 0;
	["TimeSpent"] = 0;
	["Time"] = 0; -- in UTC time (os.time())
}

local DefaultConfigs = {
	["AutoRobNotifs"] = AutoRobNotifs;
	["HoldWallet"] = HoldWallet;
	["FixedCamera"] = FixedCamera;
	["SelectedAFKSpot"] = SelectedAFKSpot;
	["LowerGFX"] = LowerGFX;
}

local defaultMetaData = {
	["LegacyLogVersion"] = false;
}

do
	function decode(str)
		local function try()
			return pcall(function()
				return HttpService:JSONDecode(str)
			end)
		end

		local success = false

		local count = 1

		while not success and count <= 6 do
			local s,r = try()

			if s then
				success = true
				return r
			end

			count = count+1

			task.wait()
		end

		return
	end

	function encode(tbl)
		local function try()
			return pcall(function()
				return HttpService:JSONEncode(tbl)
			end)
		end

		local success = false

		local count = 1

		while not success and count <= 6 do
			local s,r = try()

			if s then
				success = true
				return r
			end

			count = count+1

			task.wait()
		end

		return
	end

	function format(data,template)
		local final = {}

		for i,v in pairs(template) do
			local setValue = data[i]

			if setValue == nil then
				setValue = template[i]
			end

			final[i] = setValue
		end

		return final
	end

	-- File Saving (Session Saving)
	function LoadFiles() -- looks through all files to make sure that every file is correct (not edited) and fills in any missing/corrupted required files
		-- Makes a main folder if it doesn't exist

		if not isfolder(mainFolderPath) then
			makefolder(mainFolderPath)
		end

		if not isfolder(sessionDataFolderPath) then
			makefolder(sessionDataFolderPath)
		end

		if not isfolder(logPath) then
			makefolder(logPath)
		end

		-- Config Loading
		if isfile(configPath) then
			local decoded = decode(readfile(configPath))

			if decoded then
				local formatted = format(decoded,DefaultConfigs)

				if formatted then
					local encoded = encode(formatted)

					if encoded then
						writefile(configPath,encoded)
					end

					AutoRobNotifs = formatted["AutoRobNotifs"]
					HoldWallet = formatted["HoldWallet"]
					FixedCamera = formatted["FixedCamera"]
					SelectedAFKSpot = formatted["SelectedAFKSpot"]
					LowerGFX = formatted["LowerGFX"];
				end
			end
		else
			local encoded = encode(DefaultConfigs)

			writefile(configPath,encoded or "Unable to decode")
		end

		-- Metadata Loading
		local function deleteAllLogs()
			local allLogs = listfiles(logPath)

			for _,v in pairs(allLogs) do
				delfile(v)
			end
		end

		if isfile(metaDataPath) then
			local decoded = decode(readfile(metaDataPath))

			if decoded then
				local formatted = format(decoded,defaultMetaData)

				if formatted then
					if formatted["LegacyLogVersion"] then -- log system changed as of 9/25/21
						deleteAllLogs()

						formatted["LegacyLogVersion"] = false
					end

					local encoded = encode(formatted)

					if encoded then
						writefile(metaDataPath,encoded)
					else
						warn("Failed to encode metadata")
					end
				end
			end
		else
			local encoded = encode(defaultMetaData)

			writefile(metaDataPath,encoded or "Unable to decode")

			deleteAllLogs()
		end

		local sessions = listfiles(sessionDataFolderPath)

		local sessionCount = 0

		for i=1,#sessions do
			local path = sessionPath..tostring(i)..extension

			if isfile(path) then
				local raw = readfile(path)

				local decoded = decode(raw)

				if decoded then
					local formatted = format(decoded,CashLog)

					if formatted and formatted ~= {} and formatted ~= decoded then
						local encoded = encode(formatted)

						if encoded then
							writefile(path,encoded)
						end
					else
						error("Log file ("..path..") has been marked as corrupted/tampered and has been removed")
						continue
					end
				else
					error("Log file ("..path..") has been marked as corrupted/tampered and has been removed")

					continue
				end
			end
		end

		-- Order them properly
		local indexes = {}
		for i,v in ipairs(sessions) do

			local subbed,_ = string.gsub(v,".txt","",1)
			subbed,_ = string.gsub(subbed,sessionDataFolderPath.."\\","",1)

			v = tonumber(subbed)

			if v then
				table.insert(indexes,v)
			end
		end

		-- sort it from least to greatest
		table.sort(indexes)
		-- fix order to be incremental
		for i,v in ipairs(indexes) do
			if i ~= v then
				local oldPath = sessionPath..v..extension
				local newPath = sessionPath..i..extension

				local data = readfile(oldPath)

				delfile(oldPath)

				writefile(newPath,data)
			end
		end

		local final = #listfiles(sessionDataFolderPath)

		-- update money earned and time spent variables
		for i=1,final do
			local path = sessionPath..tostring(i)..extension

			-- at this point we don't need to be careful because we are relying on the fact that the previous tests made sure all information is truthy and ordered
			local data = decode(readfile(path))

			allMoneyEarned = allMoneyEarned+data.MoneyEarned
			allTimeSpent = allTimeSpent+data.TimeSpent
		end

		do -- remove current stats from this
			allMoneyEarned = math.floor(allMoneyEarned-MoneyEarned)
			local timeSpent = SecondsSpentRobbing

			if AutoRobEnabled then
				timeSpent = timeSpent+(os.clock()-CurrentRobbingStart)
			end

			allTimeSpent = math.floor(allTimeSpent-timeSpent)
		end

		-- Create log file
		local topSep = "="
		local sideSep = "|"
		local seperateLength = 8
		local logText = ""
		local s = " " -- space
		local indent = string.rep(s,4)

		local logInfo = {
			["Date"] = os.date("%x");
			["Time"] = os.date("%X");
			["Version"] = (BETA and "b" or "")..VERSION;
		}

		local order = {"Date","Time","Version"}

		local longest = ""

		for i,v in pairs(logInfo) do
			v = i..tostring(v)
			if #v >  #longest then
				longest = v
			end
		end

		local totalSeperate = (seperateLength*2)+#longest

		local t = string.rep(topSep,totalSeperate).."\n"

		logText = t

		for i,v in ipairs(order) do
			local concat = sideSep..indent..v..": "..tostring(logInfo[v])

			local spaceAdd = totalSeperate-#concat-1

			concat = concat..string.rep(s,spaceAdd)..sideSep.."\n"

			logText = logText..concat
		end

		logText = logText..t

		thisLogPath = logPath..fileSeperator..os.time()..extension

		writefile(thisLogPath,logText)

		return final
	end
end

local nowIndex = LoadFiles()+1

local function writeLog(data,index)
	index = index or nowIndex

	local path = sessionPath..tostring(index)..extension

	local formatted = format(data,CashLog)

	if formatted then
		local encoded = encode(formatted)

		if encoded then
			writefile(path,encoded)
		end
	end
end


local function getFullName(player)
	return player.Name.." ("..player.DisplayName..")"
end

local lastSave = -1
local saveInterval = 0.5

local function save()
	local now = os.clock()
	-- Cash Log
	local timeSpent = SecondsSpentRobbing

	if AutoRobEnabled then
		timeSpent = timeSpent+(now-CurrentRobbingStart)
	end

	local newLog = {
		["MoneyEarned"] = MoneyEarned;
		["TimeSpent"] = math.floor(timeSpent);
		["Time"] = os.time(); -- in UTC time (os.time())
	}

	writeLog(newLog)

	local newConfigs = {
		["AutoRobNotifs"] = AutoRobNotifs;
		["HoldWallet"] = HoldWallet;
		["FixedCamera"] = FixedCamera;
		["SelectedAFKSpot"] = SelectedAFKSpot;
		["LowerGFX"] = LowerGFX;
	}

	local encoded = encode(newConfigs)

	if encoded then
		writefile(configPath,encoded)
	end

	lastSave = now
end

local function updateCrew()
	Crew = CrewValue and tonumber(CrewValue.Value) or 0
end

do -- Save Loop
	local last = os.clock()

	HB:Connect(function()
		local now = os.clock()
		if now-last >= saveInterval and DoSessionSaving then
			last = now

			save()
		end
	end)
end

do -- Bind to close
	Players.PlayerRemoving:Connect(function(p)
		if p == player then
			coroutine.wrap(save)()
			coroutine.wrap(logAction)("Venyx closed",nil,"beginning")
		end
	end)
end

-- General Functions
local function getTorso(character)
	return character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso")
end

local function validCharacter(character)
	if character.PrimaryPart and character:FindFirstChild("Head") and character:FindFirstChildOfClass("Humanoid") and getTorso(character) then
		return true
	else
		return false
	end
end

local function mobileCharacter(char)
	local character = char or player.Character

	if validCharacter(character) then
		local root = character.PrimaryPart
		local humanoid = character:FindFirstChildOfClass("Humanoid")
		local torso = getTorso(character)

		local motor = torso:FindFirstChildOfClass("Motor6D")

		if humanoid.Health > 0 and motor then
			return character
		end
	end

	return false
end

local function resetCharacter(shouldYield)
	if shouldYield == nil then
		shouldYield = true
	end

	local character = mobileCharacter()

	if character then
		local start = os.clock()

		local humanoid = character:FindFirstChildOfClass("Humanoid")

		humanoid.Health = 0

		local shouldReturn = false

		local addedEvent

		local g = Instance.new("BindableEvent")

		addedEvent = player.CharacterAdded:Connect(function()
			local g = Instance.new("BindableEvent")
			local w = nil
			w = HB:Connect(function()
				if addedEvent then
					g:Fire()
					w:Disconnect()
				end
			end)
			g.Event:Wait()
			g:Destroy()

			addedEvent:Disconnect()
			shouldReturn = true
		end)

		local g = Instance.new("BindableEvent")

		local d = nil
		d = HB:Connect(function()
			if shouldReturn then
				g:Fire()
				d:Disconnect()
			end
		end)

		g.Event:Wait()

		g:Destroy()
	end
end

local function tp(goal,shouldYield)
	local char = mobileCharacter()

	if not char and shouldYield then
		local b = Instance.new("BindableEvent")
		local c = nil
		c = HB:Connect(function()
			local e = mobileCharacter()
			if e then
				char = e
				c:Disconnect()
				b:Fire()
			end
		end)
		b.Event:Wait()
		b:Destroy()
	end
	if char then
		char.PrimaryPart.CFrame = goal
	end
end

local function formatTime(seconds)
	local SECONDS_IN_MINUTE = 60
	local SECONDS_IN_HOUR = 60*60
	local SECONDS_IN_DAY = 60*60*24
	local SECONDS_IN_YEAR = SECONDS_IN_DAY*365

	if seconds < SECONDS_IN_MINUTE then -- less than a minute
		return math.floor(seconds).."s"
	elseif seconds < SECONDS_IN_HOUR then -- less than an hour
		return math.floor(seconds/SECONDS_IN_MINUTE).."m"
	elseif seconds < SECONDS_IN_DAY then -- less than an day
		return math.floor(seconds/SECONDS_IN_HOUR).."h"
	elseif seconds < SECONDS_IN_YEAR then
		return math.floor(seconds/SECONDS_IN_DAY).."d"
	else
		return math.floor(seconds/SECONDS_IN_YEAR).."y"
	end
end

-- Pages
local Combat = Venyx:addPage("Aimlock")
local Settings = Venyx:addPage("Settings")

-- Sections
local Aimlock = Combat:addSection("Aimlock (BETA)")

local Keybinds = Settings:addSection("Keybinds")


	-- Update Time Variables
	local now = os.clock()

	if newValue then
		CurrentRobbingStart = now
	else
		local timeSpent = now-CurrentRobbingStart

		SecondsSpentRobbing = SecondsSpentRobbing+timeSpent
	end

	for i,v in pairs(cashiers:GetDescendants()) do
		if v:IsA("BasePart") then
			v.CanCollide = not AutoRobEnabled
		end
	end


-- Combat

local AimlockToggle = Aimlock:addToggle("Aimlock C",AimlockEnabled,function(newValue)
	AimlockEnabled = newValue

	if FreeFistsEnabled then
		Venyx:Notify("Warning","Aimlock and free fists don't work well together! It is reccomended you disable one of them.")
	end
end)

-- Game Settings
local Hidden = Instance.new("Folder")
Hidden.Name = "Hidden"

local hiddenItems = {}
local hiddenItemData = {} -- holds materials and old parents

local function updateGFX(setting)
	logAction("Lower graphics",setting)
	if setting == true then
		for i,v in pairs(workspace:GetDescendants()) do
			if v:IsA("Texture") or v:IsA("SurfaceAppearance") then
				table.insert(hiddenItems,v)
				hiddenItemData[v] = v.Parent
				v.Parent = Hidden
			elseif v:IsA("BasePart") and v.Material ~= Enum.Material.Glass and v.Material ~= Enum.Material.ForceField then
				table.insert(hiddenItems,v)
				hiddenItemData[v] = v.Material
				v.Material = Enum.Material.SmoothPlastic
			end
		end
	elseif setting == false then
		for i,v in pairs(hiddenItems) do
			local data = hiddenItemData[v]

			if typeof(data) == "EnumItem" then
				v.Material = data
			else
				v.Parent = data
			end
		end

		hiddenItems = {}
		hiddenItemData = {}
	end
end


-- Keybinds
local ToggleGui = Keybinds:addKeybind("Toggle Gui",Enum.KeyCode.RightControl,function()
	Venyx:toggle()
end)

-- Free Fists
do
	local rDown = false

	local RightWrist = nil
	local LeftWrist = nil

	local db = false

	local key = "R"

	local input = UIS.InputBegan:Connect(function(input,gpe)
		if not gpe and input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode[key] and FreeFistsEnabled then
			rDown = not rDown
		end
	end)

	player.CharacterRemoving:Connect(function()
		pcall(function()
			RightWrist:Destroy()
		end)
		pcall(function()
			LeftWrist:Destroy()
		end)
		RightWrist,LeftWrist = nil,nil
	end)

	local updateEvent = HB:Connect(function()

		if not db then
			db = true

			pcall(function()
				local char = mobileCharacter()
				local goal = mouse.Hit

				if char and goal then
					local RH = char:FindFirstChild("RightHand")
					local LH = char:FindFirstChild("LeftHand")

					RightWrist = RightWrist or RH:FindFirstChild("RightWrist")
					LeftWrist = LeftWrist or LH:FindFirstChild("LeftWrist")

					if not (RightWrist and LeftWrist and RH and LH)  then
						resetCharacter()
						db = false
						return
					else
						if FreeFistsEnabled and rDown then
							LeftWrist.Parent = nil
							RightWrist.Parent = nil

							RH.CFrame = goal
							LH.CFrame = goal
						else
							LeftWrist.Parent = LH
							RightWrist.Parent = RH
						end

						if not FreeFistsEnabled then
							rDown = false
						end
					end
				end
			end)

			db = false
		end
	end)
end

do -- Aimlock
	local key = "C"

	local target = nil
	local holding = false

	UIS.InputBegan:Connect(function(input,gpe)
		if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode[key] and not gpe and #Players:GetPlayers() > 0 then
			if not holding then
				local me = mobileCharacter()

				if me then
					local mr = me.PrimaryPart

					local selected = nil

					local params = RaycastParams.new()
					local filter = {}

					for i,v in pairs(Players:GetPlayers()) do
						if v ~= player and mobileCharacter(v.Character) then
							table.insert(filter,v.Character)
						end
					end

					params.FilterDescendantsInstances = filter
					params.FilterType = Enum.RaycastFilterType.Whitelist
					params.IgnoreWater = false

					local mousePos = UIS:GetMouseLocation()

					local unitRay = Camera:ScreenPointToRay(mousePos.X,mousePos.Y)

					local ray = workspace:Raycast(unitRay.Origin,unitRay.Direction*100,params)

					if ray then
						selected = Players:GetPlayerFromCharacter(ray.Instance:FindFirstAncestorOfClass("Model"))

						if selected then
							local dataFolder = selected:FindFirstChild("DataFolder")
							local information = dataFolder and dataFolder:FindFirstChild("Information")
							local crew = information and information:FindFirstChild("Crew")

							local otherCrewId = crew and tonumber(crew.Value)

							if (Crew == 0 and otherCrewId == 0) or (Crew ~= otherCrewId) then
								target = selected
								holding = true
							else
								selected = nil
							end
						end
					end

					local idealScreenX = mouse.X--Camera.ViewportSize.X/2
					local idealScreenY = mouse.Y--Camera.ViewportSize.Y/2

					local idealDistance = 12

					if not selected then

						local best = nil
						local bestScore = math.huge

						updateCrew()

						for i,v in pairs(Players:GetPlayers()) do
							if v ~= player then
								local c = v.Character

								if mobileCharacter(c) then
									local r = c.PrimaryPart

									local screenPos,onScreen = Camera:WorldToScreenPoint(r.Position)

									if onScreen then
										local distance = math.abs((r.Position-mr.Position).Magnitude-idealDistance)
										local screenX = math.abs(screenPos.X-idealScreenX)/idealScreenX
										local screenY = math.abs(screenPos.X-idealScreenY)/idealScreenY

										local ScreenXMultiplier = 12 -- higher = more important
										local ScreenYMultiplier = 0.25 -- higher = more important

										local score = distance*(1+(screenX*ScreenXMultiplier))*(1+(screenY*ScreenYMultiplier))

                                        local dataFolder = v:FindFirstChild("DataFolder")
                                        local information = dataFolder and dataFolder:FindFirstChild("Information")
                                        local crew = information and information:FindFirstChild("Crew")

                                        local otherCrewId = crew and tonumber(crew.Value)

										if ((Crew == 0 and otherCrewId == 0) or (Crew ~= otherCrewId)) and score < bestScore then
											bestScore = distance
											best = v
										end
									end
								end
							end
						end

						if best then
							target = best
							holding = true
						end
					end
				end
			else
				holding = false
			end
		end
	end)

	local guess = 2
	local alpha = 1

	local update = HB:Connect(function()
		if AimlockEnabled then
			if holding then
				local them = target.Character

				if them then
					them = mobileCharacter(them)

					if them then
						local root = them.PrimaryPart
						local humanoid = them:FindFirstChildOfClass("Humanoid")
						local goal = root.CFrame + (humanoid.MoveDirection*guess) + (root.Velocity/50)*guess

						local zoom = (Camera.CFrame.Position-Camera.Focus.Position).Magnitude
						local point,onScreen = Camera:WorldToScreenPoint(goal.Position)

						if UIS.MouseBehavior ~= Enum.MouseBehavior.LockCurrentPosition then
							if UIS.MouseBehavior == Enum.MouseBehavior.LockCenter or not onScreen then
								Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.Focus.Position,goal.Position),alpha)
							else
								mousemoveabs(point.X,point.Y+36)
							end
						end

						return
					end
				end
				-- If code reaches this point then one of the if statements failed
				holding = false
			end
		else
			holding = false
		end
	end)
end
